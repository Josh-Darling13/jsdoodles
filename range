/**
 * A funtion that accpects 2 parameters
 * start and end --which should be whole
 * numbers and returns an
 * array containing all the numbers
 * from start to end.
 *
 * ****************************************
 * This new verserion of the this function
 * is the same as writing:
 *
 * console.log(sum(range(1,10)));
 *
 * Adding all the vaules in the array
 *
 * **************************************
 *
 * In this newer version
 *
 * the funtion takes a 3rd argument.
 *
 * The third argument is a
 *  "skip" value to search numbers
 * and find only number divisable by skip
 * then all those vaules are summed.
 *
 * BUT Wait! There's MORE!
 *
 * If NO vaule is given as a skip valude then
 * the program funcutions as it normally would
 */

 const basicRange = (start, end) => {
    let arrayRange = [0];
    while (start <= end) {
      arrayRange.push(start);
      start++;
    }
    return arrayRange;
  };
  
  const skipRange = (start, end, skip) => {
    let arrayRange = [0];
    while (start <= end) {
      if (start % skip === 0) {
        arrayRange.push(start);
      }
      start++;
    }
    return arrayRange;
  };
  
  const pickedRange = (start, end, skip) => {
    let basicArray = [0];
    let arrayTotes = 0;
    let asNum = 0;
  
    if (skip === undefined) {
      basicArray = basicRange(start, end);
    } else {
      basicArray = skipRange(start, end, skip);
    }
  
    for (let item in basicArray) {
      asNum = Number(basicArray[item]);
      arrayTotes += Number(asNum);
    }
    return arrayTotes;
  };
  
  console.log(pickedRange(1, 10, 3));
  